/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public int maxDepth(Node root) {
        /// Using breadth first search
        if (root == null)
            return 0;
        int depth = 0;
        /// Queue used for its useful FIFO functionality for adding a single level of nodes per iteration
        Queue<Node> queue = new LinkedList<Node>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i=0;i<size;i++) {
            
                /// Iterating over every node currently in the queue
                Node current = queue.poll();
                /// Adding the children nodes of the polled current node to the queue
                for (Node child:current.children) {
                    queue.offer(child);
                }
            }
            
            ///Incrementing depth with each iteration as one level of nodes is added each time
            depth++;
        }
        return depth;
    }
}
